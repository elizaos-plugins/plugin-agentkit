{"version":3,"sources":["../src/provider.ts","../src/actions.ts","../src/index.ts"],"sourcesContent":["import type { Provider, IAgentRuntime } from \"@elizaos/core\";\nimport { CdpAgentkit } from \"@coinbase/cdp-agentkit-core\";\nimport * as fs from \"node:fs\";\n\nconst WALLET_DATA_FILE = \"wallet_data.txt\";\n\nexport async function getClient(): Promise<CdpAgentkit> {\n    // Validate required environment variables first\n    const apiKeyName = process.env.CDP_API_KEY_NAME;\n    const apiKeyPrivateKey = process.env.CDP_API_KEY_PRIVATE_KEY;\n\n    if (!apiKeyName || !apiKeyPrivateKey) {\n        throw new Error(\"Missing required CDP API credentials. Please set CDP_API_KEY_NAME and CDP_API_KEY_PRIVATE_KEY environment variables.\");\n    }\n\n    let walletDataStr: string | null = null;\n\n    // Read existing wallet data if available\n    if (fs.existsSync(WALLET_DATA_FILE)) {\n        try {\n            walletDataStr = fs.readFileSync(WALLET_DATA_FILE, \"utf8\");\n        } catch (error) {\n            console.error(\"Error reading wallet data:\", error);\n            // Continue without wallet data\n        }\n    }\n\n    // Configure CDP AgentKit\n    const config = {\n        cdpWalletData: walletDataStr || undefined,\n        networkId: process.env.CDP_AGENT_KIT_NETWORK || \"base-sepolia\",\n        apiKeyName: apiKeyName,\n        apiKeyPrivateKey: apiKeyPrivateKey\n    };\n\n    try {\n        const agentkit = await CdpAgentkit.configureWithWallet(config);\n        // Save wallet data\n        const exportedWallet = await agentkit.exportWallet();\n        fs.writeFileSync(WALLET_DATA_FILE, exportedWallet);\n        return agentkit;\n    } catch (error) {\n        console.error(\"Failed to initialize CDP AgentKit:\", error);\n        throw new Error(`Failed to initialize CDP AgentKit: ${error.message || 'Unknown error'}`);\n    }\n}\n\nexport const walletProvider: Provider = {\n    async get(_runtime: IAgentRuntime): Promise<string | null> {\n        try {\n            const client = await getClient();\n            // Access wallet addresses using type assertion based on the known structure\n            const address = (client as unknown as { wallet: { addresses: Array<{ id: string }> } }).wallet.addresses[0].id;\n            return `AgentKit Wallet Address: ${address}`;\n        } catch (error) {\n            console.error(\"Error in AgentKit provider:\", error);\n            return `Error initializing AgentKit wallet: ${error.message}`;\n        }\n    },\n};\n","import {\n    type Action,\n    generateText,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    type State,\n    composeContext,\n    generateObject,\n} from \"@elizaos/core\";\nimport type { CdpAgentkit } from \"@coinbase/cdp-agentkit-core\";\nimport { CdpToolkit, type Tool } from \"@coinbase/cdp-langchain\";\n\ntype GetAgentKitActionsParams = {\n    getClient: () => Promise<CdpAgentkit>;\n    config?: {\n        networkId?: string;\n    };\n};\n\n/**\n * Get all AgentKit actions\n */\nexport async function getAgentKitActions({\n    getClient,\n}: GetAgentKitActionsParams): Promise<Action[]> {\n    const agentkit = await getClient();\n    const cdpToolkit = new CdpToolkit(agentkit);\n    const tools = cdpToolkit.getTools();\n    const actions = tools.map((tool: Tool) => ({\n        name: tool.name.toUpperCase(),\n        description: tool.description,\n        similes: [],\n        validate: async () => true,\n        handler: async (\n            runtime: IAgentRuntime,\n            message: Memory,\n            state: State | undefined,\n            _options?: Record<string, unknown>,\n            callback?: HandlerCallback\n        ): Promise<boolean> => {\n            try {\n                const client = await getClient();\n                let currentState =\n                    state ?? (await runtime.composeState(message));\n                currentState = await runtime.updateRecentMessageState(\n                    currentState\n                );\n\n                const parameterContext = composeParameterContext(\n                    tool,\n                    currentState\n                );\n                const parameters = await generateParameters(\n                    runtime,\n                    parameterContext,\n                    tool\n                );\n\n                const result = await executeToolAction(\n                    tool,\n                    parameters,\n                    client\n                );\n\n                const responseContext = composeResponseContext(\n                    tool,\n                    result,\n                    currentState\n                );\n                const response = await generateResponse(\n                    runtime,\n                    responseContext\n                );\n\n                callback?.({ text: response, content: result });\n                return true;\n            } catch (error) {\n                const errorMessage =\n                    error instanceof Error ? error.message : String(error);\n                callback?.({\n                    text: `Error executing action ${tool.name}: ${errorMessage}`,\n                    content: { error: errorMessage },\n                });\n                return false;\n            }\n        },\n        examples: [],\n    }));\n    return actions;\n}\n\nasync function executeToolAction(\n    tool: Tool,\n    parameters: unknown,\n    client: CdpAgentkit\n): Promise<unknown> {\n    const toolkit = new CdpToolkit(client);\n    const tools = toolkit.getTools();\n    const selectedTool = tools.find((t) => t.name === tool.name);\n\n    if (!selectedTool) {\n        throw new Error(`Tool ${tool.name} not found`);\n    }\n\n    return await selectedTool.call(parameters);\n}\n\nfunction composeParameterContext(tool: Tool, state: State): string {\n    const contextTemplate = `{{recentMessages}}\n\nGiven the recent messages, extract the following information for the action \"${tool.name}\":\n${tool.description}\n`;\n    return composeContext({ state, template: contextTemplate });\n}\n\nasync function generateParameters(\n    runtime: IAgentRuntime,\n    context: string,\n    tool: Tool\n): Promise<unknown> {\n    const { object } = await generateObject({\n        runtime,\n        context,\n        modelClass: ModelClass.LARGE,\n        schema: tool.schema,\n    });\n\n    return object;\n}\n\nfunction composeResponseContext(\n    tool: Tool,\n    result: unknown,\n    state: State\n): string {\n    const responseTemplate = `\n# Action Examples\n{{actionExamples}}\n\n# Knowledge\n{{knowledge}}\n\n# Task: Generate dialog and actions for the character {{agentName}}.\nAbout {{agentName}}:\n{{bio}}\n{{lore}}\n\n{{providers}}\n\n{{attachments}}\n\n# Capabilities\nNote that {{agentName}} is capable of reading/seeing/hearing various forms of media, including images, videos, audio, plaintext and PDFs. Recent attachments have been included above under the \"Attachments\" section.\n\nThe action \"${tool.name}\" was executed successfully.\nHere is the result:\n${JSON.stringify(result)}\n\n{{actions}}\n\nRespond to the message knowing that the action was successful and these were the previous messages:\n{{recentMessages}}\n`;\n    return composeContext({ state, template: responseTemplate });\n}\n\nasync function generateResponse(\n    runtime: IAgentRuntime,\n    context: string\n): Promise<string> {\n    return generateText({\n        runtime,\n        context,\n        modelClass: ModelClass.LARGE,\n    });\n}\n","import type { Plugin } from \"@elizaos/core\";\nimport { walletProvider, getClient } from \"./provider\";\nimport { getAgentKitActions } from \"./actions\";\n\n// Initial banner\nconsole.log(\"\\n┌════════════════════════════════════════┐\");\nconsole.log(\"│          AGENTKIT PLUGIN               │\");\nconsole.log(\"├────────────────────────────────────────┤\");\nconsole.log(\"│  Initializing AgentKit Plugin...       │\");\nconsole.log(\"│  Version: 0.0.1                        │\");\nconsole.log(\"└════════════════════════════════════════┘\");\n\nconst initializeActions = async () => {\n    try {\n        // Validate environment variables\n        const apiKeyName = process.env.CDP_API_KEY_NAME;\n        const apiKeyPrivateKey = process.env.CDP_API_KEY_PRIVATE_KEY;\n\n        if (!apiKeyName || !apiKeyPrivateKey) {\n            console.warn(\"⚠️ Missing CDP API credentials - AgentKit actions will not be available\");\n            return [];\n        }\n\n        const actions = await getAgentKitActions({\n            getClient,\n        });\n        console.log(\"✔ AgentKit actions initialized successfully.\");\n        return actions;\n    } catch (error) {\n        console.error(\"❌ Failed to initialize AgentKit actions:\", error);\n        return []; // Return empty array instead of failing\n    }\n};\n\nexport const agentKitPlugin: Plugin = {\n    name: \"[AgentKit] Integration\",\n    description: \"AgentKit integration plugin\",\n    providers: [walletProvider],\n    evaluators: [],\n    services: [],\n    actions: await initializeActions(),\n};\n\nexport default agentKitPlugin;\n"],"mappings":"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","names":["getClient"]}